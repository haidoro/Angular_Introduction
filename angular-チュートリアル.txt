**********************************************
AngularJSチュートリアル　解説
https://docs.angularjs.org/tutorial
**********************************************

+++++++++++++++++++++++++++++++++++++++++++++++
STEP1
+++++++++++++++++++++++++++++++++++++++++++++++
AngularJSが標準HTMLをどのように拡張するか試してみます。
STEP1は単純な静的なHTMLページの例です。
STEP2は同じ内容をAngularJSで作成する例です。

まず、静的な HTMLページを作成します。
今回の例では、2つの電話機のリストが追加します。

ファイル名はapp/index.html
[html]
<ul>
  <li>
    <span>Nexus S</span>
    <p>
      Fast just got faster with Nexus S.
    </p>
  </li>
  <li>
    <span>Motorola XOOM™ with Wi-Fi</span>
    <p>
      The Next, Next Generation tablet.
    </p>
  </li>
</ul>
[/html]

+++++++++++++++++++++++++++++++++++++++++++++++
STEP2
+++++++++++++++++++++++++++++++++++++++++++++++
前回作成したシンプルなHTMLコンテンツと同等のものをAngular.jsで記述してみます。
このSTEP2ではHTMLでビューを作成することと「モジュール」と「コントローラ」を作成することです。

AngularJSアプリケーションでは、モデル、ビュー、コントローラ（MVC）のデザインパターンを使用してコードを分離しています。
これを念頭に置いて、今後の作業はAngularJSとJavaScriptを使用して、モデル、ビュー、コントローラを追加していく作業を行ないます。

[事前準備]
まずはAngularJSをCDNで読み込みます。またsrc属性で作成したapp.jsを読み込みます。

[html]
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>
<script src="app.js"></script>
[/html]

------------------------------------------
ビューとテンプレート
------------------------------------------
Step2の段階では直接HTMLにビューを作成します。

app/index.html
[html]
<!doctype html>
<html ng-app="phonecatApp">
<head>
  <meta charset="utf-8">
  <title>Google Phone Gallery</title>
  <script src="bower_components/angular/angular.js"></script>
  <script src="app.js"></script>
</head>
<body ng-controller="PhoneListController">

  <ul>
    <li ng-repeat="phone in phones">
      <span>{{phone.name}}</span>
      <p>{{phone.snippet}}</p>
    </li>
  </ul>

</body>
</html>
[/html]

ビューとして使われるHTMLとプログラムを記述するコントローラー部分を関連付けているのは、Angular.jsでのインターポレーションです。また、$scopeがvewとcontrollerをバインドしてくれています。
また、注目すべき点として、ハードコーディングされた電話リストをngRepeat属性と2つの AngularJS式（{{ }}のこと）に置き換えたことです。

.....................................
インターポレーション
.....................................
インターポレーションとは、補完や補充することです。文字列を変数などのプレースホルダーを使って作ることをいいます。
例えば、JavaScriptでは文字列と変数を＋でつなぐことができます。このことをインターポレーションといいます。

簡単なJavaScriptのインターポレーションの例
[js]
 var name = 'Tahara';
'私は' + name + 'です。';
// 私はTaharaです。
[/js]

Angular.jsでのインターポレーションは$scopeがvewとcontrollerをバインドしてくれます。

HTML側とインターポレートするにはAngularJS式{{}}を使います。
{{}}の中身とコントローラーの中身は$scopeが橋渡します。

簡単な参考例（これはSTEP2のサンプルではありません）
コントロール側の記述
[js]
myApp.controller('mainController',['$scope',function($scope) {
	$scope.name = 'Tahara';
}]);
[/js]
HTML側の記述
[html]
<p>私は{{name}}です。</p>
[/html]

{{}}の中身は$scopeの中となりますので、{{$scope.name}}ではないので注意してください。

また、ページ読み込みの際、「<p>私は{{name}}です。</p>」部分はそのままダウンロードされてきてDOM構築されています。そして、レンダリング時点でインターポレートさせています。

STEP2でのAngular式は次の部分です。
[html]
{{phone.name}}{{phone.snippet}}
[/html]

.....................................
HTMLのカスタム属性について
.....................................
HTML5から用意されたカスタム属性はHTMLに独自の属性を作成することができます。HTMLの表示上では何も起こりませんが、スクリプト上（DOM操作）では認識できているものです。

AngularJSはカスタム属性を活用しているのでカスタム属性について理解しておくことが重要です。
.....................................
リピートの仕組み
.....................................
AngularJSのカスタム属性「ng-repeat属性」はliのように別々の内容を繰り返し表示するときに便利です。
記述は以下の通りです。

ng-repeat="phone in phones"

この属性をliに指定するとphonesの配列化されたデータが展開された状態で複数のliに収まります。
phonesはオブジェクト（連想配列）の状態でデータが格納されています。ということはどこかでこのオブジェクトを作成しないといけないことになります。

------------------------------------------
 モジュール
------------------------------------------
モジュールとはアプリを構成するためのコンポーネント部品の入れ物です。

例えば、クッキーを作る製造ライン専用の部屋を作成するイメージです。モジュールというクッキー専用の部屋を作ることで、大規模な工場になったとしても、クッキーを作る型とチョコレートを作る型の名前がどちらも「型」で名前が重なっていますが実際は全く別のものだった場合にミスを犯すことがなくなるのです。
 
AngularJSを使う場合、まずモジュール作成を行います。
これは別ファイルにしたapp/app.jsに記述します。
 
AngularJSのモジュール作成はmoduleメソッドを使用します。

[記述方法]
angular.module('モジュール名', 依存するモジュール[配列]) 
 
重要：依存するモジュールが無くても空の配列を記述すること。
  
例
[js]
 var phonecatApp = angular.module('phonecatApp', []);
[/js]
 
作成したモジュールとHTMLを関連付けるには、カスタム属性を使います。このことをAngularJSでは「ng-appディレクティブ」と呼びます。
例
[js]
 ng-app="phonecatApp"
[/js] 

ディレクティブは「指令」「命令」と言った意味がありますが、あるDOM要素を操るために記述する命令だとイメージしておくと分かりやすいです。

------------------------------------------
 コントローラー
------------------------------------------
コントローラは、コンストラクタ関数の引数に$scopeパラメータ使う単純な仕組みです。
データモデル（オブジェクトリテラル表記の電話の単純な配列）は、PhoneListController コントローラ内でインスタンス化しています。
.....................................
コントローラーの記述方法
第1引数はコントローラーの名前
第2引数は関数でコントローラーの実態
例
モジュール名.controller('コントローラ名',function(){
    処理内容
});
.....................................

STEP2のコントローラ記述
[js]
phonecatApp.controller('PhoneListController', function PhoneListController($scope) {
  $scope.phones = [
    {
      name: 'Nexus S',
      snippet: 'Fast just got faster with Nexus S.'
    }, {
      name: 'Motorola XOOM™ with Wi-Fi',
      snippet: 'The Next, Next Generation tablet.'
    }, {
      name: 'MOTOROLA XOOM™',
      snippet: 'The Next, Next Generation tablet.'
    }
  ];
});
[/js]

ng-controllerを使うとコントローラーとHTMLを関連づけることができます。
[html]
<body ng-controller="PhoneListController">
[/html]

コントローラは、データモデルのコンテキストを提供することで、モデルとビューの間のデータバインディングを確立することができます。

PhoneListControllerコントローラは、電話のデータを添付し$scopeでコントローラ機能に注入しました。このスコープは、アプリケーションの定義時に作成されたルートスコープのプロトタイプの子孫です。このコントローラーの有効範囲は、<body ng-controller="PhoneListController">
で指定された範囲となります。つまりbody全部です。
------------------------------------------
Dependency Injection(依存性の注入　省略してdi）
------------------------------------------
Dependency Injectionとはfunctionにオブジェクトを渡すことです。
オブジェクトをfunctionの中で生成するのでは無く、functionに引数として渡すことで依存性を無くします。
例
[js]
var Person = function (firstName,lastName){
	this.firstName = firstName;
	this.lastName = lastName;
}

function logPerson(){
	var tarou = new Person('Tarou','Yamada');
	console.log(tarou);
}

logPerson();
[/js]
この場合logPerson();はPerson('Tarou','Yamada')に依存しています。
これはあまり使い勝手がよくありません。

従って以下のように記述します。
[js]
function logPerson(person){	
	console.log(person);
}

var tarou = new Person('Tarou','Yamada');
logPerson(tarou);
[/js]

これが依存性の注入になります。

------------------------------------------
Scopeサービス
------------------------------------------
Scopeはvewとmodelを繋げてくれる存在です。
ScopeはScopeサービスから作られるオブジェクトです。
使い方として、＄scopeオブジェクトを使用します。
$マークはangularが用意したオブジェクトを識別しやすくしたものです。
＄scopeを依存性の注入を使って渡しています。

AngularJSのスコープの概念は非常に重要です。スコープは、テンプレート、モデル、およびコントローラーを連携させるための接着剤と見ることができます。AngularJSは、テンプレート、データモデル、コントローラに含まれている情報とともにスコープを使用して、モデルとビューを別々の状態に保ちます。
また特徴的なこととして、スコープは同期します。モデルに加えられた変更はすべてビューに反映されます。そして、ビュー内で発生した変更はモデルに反映されます。

var myApp = angular.module('myApp', []);

myApp.controller('mainController', function($scope) {
	$scope.name = 'Yamada';
	$scope.hobby = 'fissing';
	$scope.getName = function(){
		return 'Yamada';
	}
	console.log($scope.getName());
    console.log($scope);
});


引数の読み込み
var search = function(firstName,height,age,hobby){
	return 'Yamada';
}
console.log(search(1,2,3,4));
console.log(angular.injector().annotate(search));

その他のサービス
$log
$http

例
myApp.controller('mainController', function($scope,$log,$filter) {
	$scope.name = 'tarou';
	$scope.formattedName = $filter('uppercase')($scope.name);
	$log.info($scope.name);
	$log.info($scope.formattedName);
});


------------------------------------------
minification
------------------------------------------
minification:ファイルを圧縮してダウンロードを高速化
圧縮サービスサイト
https://javascript-minifier.com/

例えば次のコントローラーをminify化したらどうなるか
 myApp.controller('mainController', function($scope,$log,$filter) {
 	$log.info($scope);
 });

このようになりエラーになります。
 myApp.controller("mainController",function(n,o,l){o.info(n)});


そこで配列を使って次のように記述します。
myApp.controller('mainController',['$scope','$log','$filter',function($scope,$log,$filter) {
$log.info($scope);
}]);
これならminify 化してもエラーになりません。
myApp.controller("mainController",["$scope","$log","$filter",function(o,l,n){l.info(o)}]);

AngularJSは第2引数の配列の文字列部分を引数と見ています。その次にくるfunctionの引数はどのようなものであっても最初の文字列が引数として当てられます。


+++++++++++++++++++++++++++++++++++++++++++++++
STEP3 コンポーネント
+++++++++++++++++++++++++++++++++++++++++++++++
------------------------------------------
コンポーネントについて
------------------------------------------
テンプレート（バインディングとプレゼンテーションロジックを含むビューの一部）は、我々のデータを整理し、ユーザに表示するための青写真として機能します。

この組み合わせ（テンプレート+コントローラ）は一般的なパターンであるため、AngularJSはコンポーネントを再利用可能な独立したエンティティ（コンポーネントとも呼ばれます）に組み合わせる簡単で簡潔な方法を提供します。さらに、AngularJSは、コンポーネントの各インスタンスに対していわゆる隔離スコープを作成します。つまり、プロトタイプの継承がなく、コンポーネントがアプリケーションの他の部分に影響を及ぼす危険性がなくなります。

コンポーネントを作成するには、AngularJSモジュールの.component（）メソッド を使用します。コンポーネント名とコンポーネント定義オブジェクトを提供する必要があります。

コンポーネントはディレクティブでもあるので、コンポーネントの名前はcamelCase （たとえばmyAwesomeComponent）で指定します。そして、HTMLで参照するときには、ダッシュ区切りにします。先ほどの例では、my-awesome-component となります。

最も単純な形式では、コンポーネント定義オブジェクトにテンプレートとコントローラが含まれています。（実際にはコントローラーを省略することができ、AngularJSはダミーコントローラーを作成します。これは、テンプレートに何も振る舞わない単純な "プレゼンテーション"コンポーネントに便利です）。

------------------------------------------
コンポーネントの記述方法
------------------------------------------
コンポーネントはJavaScriptコードにangular.Module.component()メソッドで記述します。
第1引数はコンポーネント名の文字列で、第2引数にオブジェクトでオプションを定義します。
component(コンポーネントの名前, ディレクティブ定義オブジェクト)

HTML側にはコンポーネント名をダッシュ表示に変えたタグ（HTMLにはないAngularだけが認識できるタグ）を記述すれば、好きな場所に表示が可能となります。

------------------------------------------
STEP3コンポーネントの使用サンプルコード
------------------------------------------
HTMLコード
[html]
<!doctype html>
<html lang="en" ng-app="phonecatApp">
  <head>
    <meta charset="utf-8">
    <title>Google Phone Gallery</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>
    <script src="app.js"></script>
    <script src="phone-list.component.js"></script>
  </head>
  <body>

    <!-- Use a custom component to render a list of phones -->
    <phone-list></phone-list>

  </body>
</html>
[/html]


app/app.js
[js]
'use strict';

// Define the `phonecatApp` module
angular.module('phonecatApp', []);
[/js]


app/phone-list.component.js
[js]
'use strict';

/* Register `phoneList` component, along with its associated controller and template */
angular.
  module('phonecatApp').
  component('phoneList', {
    template:
        '<ul>' +
          '<li ng-repeat="phone in $ctrl.phones">' +
            '<span>{{phone.name}}</span>' +
            '<p>{{phone.snippet}}</p>' +
          '</li>' +
        '</ul>',
    controller: function PhoneListController() {
      this.phones = [
        {
          name: 'Nexus S',
          snippet: 'Fast just got faster with Nexus S.'
        }, {
          name: 'Motorola XOOM™ with Wi-Fi',
          snippet: 'The Next, Next Generation tablet.'
        }, {
          name: 'MOTOROLA XOOM™',
          snippet: 'The Next, Next Generation tablet.'
        }
      ];
    }
  });
[/js]

以上の記述で、今回作成したサンプルの再利用が可能となりました。
<phone-list></phone-list>
上記のタグをページのどこにでも記述するだけで、携帯電話のリストを取得できます。HTML上ではよりクリーンな宣言方法となり、それを見るだけで携帯電話のリストがあることがわかります。
コンポーネントは「外部の影響」から隔離され、安全です。同様に、アプリケーションの他の部分で誤って何かを壊す可能性があるので、心配する必要はありません。私たちのコンポーネントの内部で何が起こるかは、私たちのコンポーネントの内部にとどまります。
また、コンポーネントを単独でテストする方法が簡単になります。


+++++++++++++++++++++++++++++++++++++++++++++++
STEP4 ディレクトリとファイルの構成
+++++++++++++++++++++++++++++++++++++++++++++++
このSTEPから表示の確認はFirefoxを使ってください。あるいは、何らかのサーバーを経由して確認する必要があります。
ローカル環境のChromeでは表示されません。

今回のサンプルをより簡単に拡張可能かつ保守可能にするために、一歩前進し、コードベースをリファクタリングし、ファイルとコードを変更します。

・各エンティティを独自のファイルに入れます。
・関数ではなく、機能領域別にコードを整理します。
・コードを他のモジュールが依存できるモジュールに分割します。

ファイルの整理
私たちはファイルを機能別にディレクトリに分けてグループ化します。たとえば、アプリケーションに電話機の一覧を表示するセクションがあるので、関連するすべてのファイルを 下のディレクトリに配置します。

ディレクトリの構造
app/
  phone-list/
    phone-list.component.js
    phone-list.component.spec.js
  app.js

各機能/セクションは、独自のモジュールを宣言し、関連するすべてのエンティティをそこに登録します。メインモジュール（phonecatApp）は、各機能/セクションモジュールに依存関係を宣言します。新しいプロジェクトで同じコードを再利用するには、フィーチャーディレクトリをコピーし、フィーチャーモジュールを新しいプロジェクトのメインモジュールに依存して追加します。

phoneList今回の変更により、私たちの機能は次のようになります：

app/
  phone-list/
    phone-list.module.js
    phone-list.component.js
    phone-list.component.spec.js
  app.module.js

+++++++++++++++++++++++++++++++++++++++++++++++
STEP5 リピータのフィルタリング
+++++++++++++++++++++++++++++++++++++++++++++++
アプリに検索ボックスを追加します。ユーザーが検索ボックスに入力した内容に応じて、ページのスマートフォンの機種が変更されます。

コンポーネントテンプレートの変更
app/phone-list/phone-list.template.html
[html]
<div class="container-fluid">
  <div class="row">
    <div class="col-md-2">
      <!--Sidebar content-->

      Search: <input ng-model="$ctrl.query" />

    </div>
    <div class="col-md-10">
      <!--Body content-->

      <ul class="phones">
        <li ng-repeat="phone in $ctrl.phones | filter:$ctrl.query">
          <span>{{phone.name}}</span>
          <p>{{phone.snippet}}</p>
        </li>
      </ul>

    </div>
  </div>
</div>
[/html]
phone-list.templateのHTMLに <input>タグを追加し、AngularJSのフィルタ関数を使用してngRepeatディレクティブの入力を処理しました。

ngModelディレクティブによって、ユーザーは検索条件を入力し、検索結果が電話リストに表示されるようになります。

この新しいコードは、次のことを示しています。
データ結合：これはAngularJSの中核機能の1つです。ページがロードされると、AngularJSは入力ボックスの値を、指定されたデータモデル変数にバインドしngModel、2つを同期させて保持します。

このサンプルコードでは、ユーザーが入力ボックスに入力する（バインドされた）データは、リストリピータ（）のフィルタ入力としてすぐに使用できます。データモデルを変更するとリピータの入力が変更されると、リピータは効率的にDOMを更新してモデルの現在の状態を反映します。

filterフィルターの使用：フィルター関数は 値を使用して、照会と一致するレコードのみを含む新しい配列を作成します。

ngRepeatfilterフィルタによって返される電話番号の変更に応じてビューが自動的に更新されます。プロセスは開発者にとって完全に透過的です。

+++++++++++++++++++++++++++++++++++++++++++++++
STEP6 双方向データバインディング
+++++++++++++++++++++++++++++++++++++++++++++++
このステップでは、ユーザーが電話リスト内のアイテムの並べ順を制御できるようにする機能を追加します。
動的な並べ順変更は、新しいモデルプロパティを作成し、それをリピータと一緒に配線し、データバインディングマジックが残りの作業を行うようにすることで実装されます。

次の記述で検索ボックスに加えて、アプリケーションにはドロップダウンメニューが表示され、ユーザーは電話機のリストの順序を制御できます。

テンプレートに対して以下の変更を加えます。
app/phone-list/phone-list.template.html
[html]
<div class="container-fluid">
  <div class="row">
    <div class="col-md-2">
      <!--Sidebar content-->

      <p>
        Search:
        <input ng-model="$ctrl.query">
      </p>

      <p>
        Sort by:
        <select ng-model="$ctrl.orderProp">
          <option value="name">Alphabetical</option>
          <option value="age">Newest</option>
        </select>
      </p>

    </div>
    <div class="col-md-10">
      <!--Body content-->

      <ul class="phones">
        <li ng-repeat="phone in $ctrl.phones | filter:$ctrl.query | orderBy:$ctrl.orderProp">
          <span>{{phone.name}}</span>
          <p>{{phone.snippet}}</p>
        </li>
      </ul>

    </div>
  </div>
</div>
[/html]

最初に、<select>バインドされた要素を追加しました。ユーザーは2つの提供された並べ替えオプションから選択できます。

次にfilter、orderByフィルタを使用してフィルタをチェーンし、リピータの入力をさらに処理しました。orderBy入力配列を受け取り、それをコピーし、そのコピーを並べ替えた後に返すフィルタです。

AngularJSは、select要素とモデルの間に双方向データバインディングを作成します。 

データバインディングとリピータに関するセクションで説明したように、モデルが変更されると（たとえば、ユーザーが選択ドロップダウンメニューを使用して注文を変更するなど）、AngularJSのデータバインディングによってビューが自動的に更新されます。膨大なDOM操作コードは必要ありません！

コンポーネントコントローラ
app/phone-list/phone-list.component.js
[js]
angular.
  module('phoneList').
  component('phoneList', {
    templateUrl: 'phone-list/phone-list.template.html',
    controller: function PhoneListController() {
      this.phones = [
        {
          name: 'Nexus S',
          snippet: 'Fast just got faster with Nexus S.',
          age: 1
        }, {
          name: 'Motorola XOOM™ with Wi-Fi',
          snippet: 'The Next, Next Generation tablet.',
          age: 2
        }, {
          name: 'MOTOROLA XOOM™',
          snippet: 'The Next, Next Generation tablet.',
          age: 3
        }
      ];

      this.orderProp = 'age';
    }
  });
[/js]

phones電話機の配列であるモデルを修正し、age各電話機レコードにプロパティを追加しました。このプロパティは、電話をage順に並べ替えるために使用されます。

デフォルト値をorderProptoに設定する行をコントローラに追加しました。ここでデフォルト値を設定しなかった場合、ユーザーがドロップダウンメニューからオプションを選択するまで、フィルタは初期化されません。

これは、双方向のデータバインディングについて話す良い時期です。アプリケーションがブラウザにロードされると、ドロップダウンメニューで「最新」が選択されていることに注意してください。これはコントローラに設定orderPropさ 'age'れているためです。したがって、バインディングはモデルからUIへの方向に作用します。ドロップダウンメニューで「アルファベット順」を選択すると、モデルも更新され、電話機の並べ替えが行われます。これは、UIからモデルへの逆方向の仕事をしているデータバインディングです。

+++++++++++++++++++++++++++++++++++++++++++++++
STEP7 XHRと依存性注入
+++++++++++++++++++++++++++++++++++++++++++++++
ハードコーディングされたデータセットに3つの電話機を搭載したアプリを構築するには十分です。$ httpという AngularJSの組み込みサービスの1つを使用して、サーバーから大きなデータセットを取得しましょう。AngularJSの依存性注入（DI）を使用して、コンポーネントのコントローラにサービスを提供します。

現在、サーバからロードされた20台の電話機のリストがあります。

app/phones/phones.json

[js]
[
  {
    "age": 13,
    "id": "motorola-defy-with-motoblur",
    "name": "Motorola DEFY\u2122 with MOTOBLUR\u2122",
    "snippet": "Are you ready for everything life throws your way?"
    ...
  },
  ...
]
[/js]

コンポーネントコントローラ
私たちは、ファイル内のデータを取得するために私たちのWebサーバーへのHTTPリクエストを作成するために、コントローラでAngularJSの$ httpサービスを使用します。Webアプリケーションで一般的な操作を処理する組み込みのAngularJSサービスの 1つです。AngularJSは、必要な場所で、これらのサービスをあなたのために注入します。app/phones/phones.json$http

サービスはAngularJSのDIサブシステムによって管理されます。依存関係注入は、Webアプリケーションを適切な構造（プレゼンテーション、データ、制御などの独立したエンティティ）と疎結合（エンティティ間の依存関係はエンティティ自身ではなくDIサブシステムによって解決されます）にするのに役立ちます。その結果、アプリケーションのテストも容易になります。
app/phone-list/phone-list.component.js
[js]
angular.
  module('phoneList').
  component('phoneList', {
    templateUrl: 'phone-list/phone-list.template.html',
    controller: function PhoneListController($http) {
      var self = this;
      self.orderProp = 'age';

      $http.get('phones/phones.json').then(function(response) {
        self.phones = response.data;
      });
    }
  });
[/js]
$http私たちのWebサーバーに対してHTTP GETリクエストを行い、（URLはファイルに関連しています）。サーバーは、JSONファイル内のデータを提供することによって応答します。（応答はバックエンドサーバーによって動的に生成されたものでもよく、ブラウザーとアプリケーションにはどちらも同じように見えます。簡単にするために、このチュートリアルではJSONファイルを使用します）。phones.jsonindex.html

この$httpサービスは、メソッドを持つpromiseオブジェクトを返します。このメソッドは、非同期レスポンスを処理し、電話機データをコントローラに割り当てるために呼び出されます。AngularJSがJSONレスポンスを検出し、コールバックに渡されたオブジェクトのプロパティにそれを解析したことに注目してください。then()phonesdataresponse

値が定義されていないphonesコールバック関数にプロパティを代入しているので、コントローラインスタンスにポイントthisするローカル変数も導入しselfます。

AngularJSでサービスを使用するには、必要な依存関係の名前を次のようにコントローラのコンストラクタ関数の引数として宣言するだけです。

function PhoneListController($http) {...}
AngularJSの依存性インジェクタは、コントローラの構築時に、コントローラにサービスを提供します。また、依存インジェクタは、サービスが持つ可能性のある推移的な依存関係を作成します（サービスは他のサービスに依存することが多い）。

引数の名前は、インジェクタがこれらを使用して依存関係をルックアップするため重要であることに注意してください。

$-prefix命名規則
あなたは独自のサービスを作成することができます。実際には、これからもいくつかのステップを実行します。命名規則として、AngularJSの組み込みサービス、Scopeメソッド、および他のいくつかのAngularJS API $では、名前の前に接頭辞が付きます 。

$プレフィックスはAngularJSが提供するサービスを名前空間にあります。衝突を避けるためには、サービスの名前を付けたり、a $。

スコープを調べると、いくつかのプロパティもあります$$。これらのプロパティはプライベートとみなされるため、アクセスまたは変更しないでください。

細分化に関する注釈
AngularJSは、コントローラのコンストラクタ関数への引数の名前から、コントローラの依存関係を推論しているので、あなたがした場合、縮小化のためのJavaScriptコード PhoneListControllerコントローラを、その関数の引数のすべてが同様に縮小されることになる、と依存性注入器を識別することができませんサービスを正しく

この問題は、文字列として提供されている依存関係の名前を関数に注釈を付けることで解決できますが、これは縮小されません。これらの注入注釈を提供するには、2つの方法があります。

$inject文字列の配列を保持するコントローラ関数のプロパティを作成します。配列内の各文字列は、対応するパラメータに挿入するサービスの名前です。この例では、次のように記述します。

function PhoneListController($http) {...}
PhoneListController.$inject = ['$http'];
...
.component('phoneList', {..., controller: PhoneListController});
インラインアノテーションを使用すると、関数を提供するだけでなく、配列を提供することができます。この配列には、サービス名のリストが含まれ、その後に関数自体が配列の最後の項目として含まれます。

function PhoneListController($http) {...}
...
.component('phoneList', {..., controller: ['$http', PhoneListController]});
これらの方法は両方とも、AngularJSによって注入可能な関数で動作しますので、どちらを使用するかはプロジェクトのスタイルガイドによって決まります。

2番目の方法を使用する場合は、コントローラーを登録するときにコンストラクター関数をインラインで提供するのが一般的です。

.component('phoneList', {..., controller: ['$http', function PhoneListController($http) {...}]});
この時点以降、チュートリアルではインラインメソッドを使用します。これを念頭に置いて、注釈を私たちに追加しましょうPhoneListController：

app/phone-list/phone-list.component.js
[js]
angular.
  module('phoneList').
  component('phoneList', {
    templateUrl: 'phone-list/phone-list.template.html',
    controller: ['$http',
      function PhoneListController($http) {
        var self = this;
        self.orderProp = 'age';

        $http.get('phones/phones.json').then(function(response) {
          self.phones = response.data;
        });
      }
    ]
  });
[/js]

+++++++++++++++++++++++++++++++++++++++++++++++
STEP8 テンプレートリンクと画像
+++++++++++++++++++++++++++++++++++++++++++++++
このステップでは、電話リストの電話機のサムネイル画像を追加します。リンクは、今のところどこにもありません。以降の手順では、リンクを使用して、カタログ内の電話機に関する追加情報を表示します。

現在、電話機のリンクと画像がリストにあります。

データ
このファイルには、各電話機の固有のIDとイメージのURLが含まれています。URLはディレクトリを指します。phones.jsonapp/img/phones/
app/phones/phones.json
[js]
[
  {
    ...
    "id": "motorola-defy-with-motoblur",
    "imageUrl": "img/phones/motorola-defy-with-motoblur.0.jpg",
    "name": "Motorola DEFY\u2122 with MOTOBLUR\u2122",
    ...
  },
  ...
]
[/js]

コンポーネントテンプレート

app/phone-list/phone-list.template.html
[html]
...
<ul class="phones">
  <li ng-repeat="phone in $ctrl.phones | filter:$ctrl.query | orderBy:$ctrl.orderProp" class="thumbnail">
    <a href="#/phones/{{phone.id}}" class="thumb">
      <img ng-src="{{phone.imageUrl}}" alt="{{phone.name}}" />
    </a>
    <a href="#/phones/{{phone.id}}">{{phone.name}}</a>
    <p>{{phone.snippet}}</p>
  </li>
</ul>
...
[/html]
将来的に電話の詳細ページにつながるリンクを動的に生成するために、href属性値にはよく知られている二重中括弧を使用しました。ステップ2では、要素コンテンツとしてバインディングを追加しました 。このステップでは、要素属性でバインディングが使用されます。{{phone.name}}{{phone.id}}

また、ngSrc ディレクティブ付きのimageタグを使用して、各レコードの隣に電話機イメージを追加しました。このディレクティブは、ブラウザがAngularJS マークアップを文字通り扱うことを防ぎ、通常の属性（）で属性バインディングのみを指定した場合、無効なURL（）へのリクエストを開始します。このディレクティブを使用すると、ブラウザは無効な場所へのHTTPリクエストを作成しません。{{ expression }}http://localhost:8000/{{phone.imageUrl}}src<img src="{{phone.imageUrl}}">ngSrc

+++++++++++++++++++++++++++++++++++++++++++++++
STEP9 ルーティングと複数のビュー
+++++++++++++++++++++++++++++++++++++++++++++++
このステップでは、ngRouteというAngularJSモジュールを使用して、レイアウトテンプレートを作成する方法と、ルーティングを追加して複数のビューを持つアプリケーションを構築する方法を学習します。

まずは今まで通り、ブラウザに電話のリストが表示されます。
次に、スマホのリンクをクリックすると、URLが特定のスマホに変わり、スマホの詳細ページのスタブが表示されます。

このステップで追加されたルーティング機能ngRouteは、AngularJSフレームワークとは別に配布されるモジュール内のAngularJSによって提供されます。そのため別途現在使用しているAngularJSのバージョン1.6.xと互換性のある"angular-route"モジュールのバージョンをリンクさせます。
------------------------------------------
複数のビュー、ルーティングおよびレイアウトテンプレート
------------------------------------------
私たちのアプリは徐々に成長し、より複雑になっています。このステップを実行する前に、アプリはユーザーに単一のビュー（すべての電話機のリストを含む）を提供し、すべてのテンプレートコードがファイルに保存されていました。アプリケーションを構築する次のステップは、リスト内の各デバイスに関する詳細情報を表示するビューを追加することです。

詳細ビューを追加するために、我々は"レイアウトテンプレート"と呼ばれるものに目を向けます。これは、アプリケーションのすべてのビューで共通のテンプレートです。現在、ユーザに表示されている現在の「ルート」に応じて、他の「部分テンプレート」がこのレイアウトテンプレートに含まれます。

AngularJSのアプリケーションルートは、$routeProviderを介して宣言されます。これは、$routeサービスのプロバイダです。このサービスにより、コントローラ、ビューテンプレート、およびブラウザの現在のURLの場所を簡単に結びつけることができます。この機能を使用して、ディープリンクを実装することができます。これにより、ブラウザの履歴（前後のナビゲーション）とブックマークを利用できます。
------------------------------------------
DI、インジェクタ、およびプロバイダについての注意
------------------------------------------
あなたに気づいた、依存性注入（DI）は、AngularJSの中核にあるので、あなたはそれがどのように動作するかについての事または2を理解することが重要です。

アプリケーションがブートストラップすると、AngularJSはアプリケーションに必要なすべてのサービスを検索して注入するために使用されるインジェクタを作成します。注射器自体は、$httpその$routeサービスが何をするかについて何も知らない。実際、インジェクタは、適切なモジュール定義で構成されていない限り、これらのサービスの存在を知りません。

インジェクタは、以下のステップのみを実行します。

アプリケーションで指定したモジュール定義をロードします。
これらのモジュール定義で定義されたすべてのプロバイダを登録します。
これを行うように頼まれたら、サービスとその依存関係をプロバイダを介して、注入可能な関数のパラメータとして遅延インスタンス化します。
プロバイダは、サービスのインスタンスを提供（作成）し、サービスの作成と実行時の動作を制御するために使用できる構成APIを公開するオブジェクトです。$route サービスの場合は、$routeProviderアプリケーションのルートを定義するためのAPIを公開します。

AngularJSモジュールは、アプリケーションからグローバル変数を削除する問題を解決し、インジェクタを設定する方法を提供します。AMDまたはrequire.jsモジュールとは対照的に、AngularJSモジュールはスクリプトのロード順序や遅延スクリプトのフェッチの問題を解決しようとしません。これらの目標は完全に独立しており、両方のモジュールシステムを並行して実行し、目標を達成することができます。
------------------------------------------
テンプレート
------------------------------------------
この$routeサービスは通常、ngView ディレクティブとともに使用されます。ngViewディレクティブの役割は、現在のルートのビューテンプレートをレイアウトテンプレートに含めることです。これにより、テンプレートに最適です。

app/index.html
[html]
<!doctype html>
<html lang="en" ng-app="phonecatApp">
  <head>
    <meta charset="utf-8">
    <title>Google Phone Gallery</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>
    <script src="angular-route.min.js"></script>
    <script src="app.module.js"></script>
    <script src="app.config.js"></script>
    <script src="phone-list/phone-list.module.js"></script>
    <script src="phone-list/phone-list.component.js"></script>
    <script src="phone-detail/phone-detail.module.js"></script>
  <script src="phone-detail/phone-detail.component.js"></script>
  </head>
  <body>

    <!-- Use a custom component to render a list of phones -->
     <div ng-view></div>
  </body>
</html>
[/html]

追加のJavaScriptファイルをアプリケーションに読み込むため<script>に、ファイルに4つの新しいタグを追加しました。

angular-route.js：ngRouteルーティングを提供するAngularJS モジュールを定義します。
app.config.js：プロバイダをメインモジュールで使用できるように設定します。
phone-detail.module.js：phoneDetailコンポーネントを含む新しいモジュールを定義します。
phone-detail.component.js：ダミーphoneDetailコンポーネントを定義します）。
テンプレート<phone-list></phone-list>から行を削除し、属性をaと置き換えたことに注意してください。
------------------------------------------
モジュールの設定
------------------------------------------
モジュールの.config（）メソッドは、利用可能なプロバイダのコンフィグレーションにアクセスできるようにします。ngRoute アプリケーションに利用可能なプロバイダ、サービス、およびディレクティブを定義ngRouteするには、phonecatAppモジュールの依存関係として追加する必要があります。

app/app.module.js
[js]
angular.module('phonecatApp', [
  'ngRoute',
  ...
]);
[/js]
現在、コアサービスとディレクティブに加えて、$route（プロバイダを使用して）アプリケーションをアプリケーションにコンフィグレーションすることもできます。構成コードをすばやく見つけることができるように、別のファイルに置き、接尾辞を使用しました。

app/app.config.js
[js]
angular.
  module('phonecatApp').
  config(['$locationProvider', '$routeProvider',
    function config($locationProvider, $routeProvider) {
      $locationProvider.hashPrefix('!');

      $routeProvider.
        when('/phones', {
          template: '<phone-list></phone-list>'
        }).
        when('/phones/:phoneId', {
          template: '<phone-detail></phone-detail>'
        }).
        otherwise('/phones');
    }
  ]);
[/js]

このメソッドを使用して、必要なプロバイダ（たとえば、）を設定関数に注入し、そのメソッドを使用して対応するサービスの動作を指定するよう要求します。ここでは、アプリケーションルートを定義するために $ routeProvider.when（）および $ routeProvider.otherwise（）メソッドを使用します。
私たちのルートは以下のように定義されています：

when('/phones')：URLハッシュフラグメントが表示されているときに表示されるビューを決定します 。指定されたテンプレートに従って、AngularJSは ビューを管理するコンポーネントのインスタンスを作成します。これは、以前はファイルで使用していたのと同じマークアップ です。

when('/phones/:phoneId')：は、URLのハッシュフラグメントが一致した場合、表示されますビューを決定/phones/<phoneId>する場合、<phoneId>URLの可変部分です。ビューを担当するphoneDetailコンポーネントになります。

otherwise('/phones')：リダイレクト先のフォールバックルートを定義します。ルート定義が現在のURLと一致しない場合はリダイレクト先にリダイレクトされます（ここでリダイレクトされます）。

私たちphoneListはすでに構築したphoneDetail コンポーネントと新しい「ダミー」コンポーネントを再利用しました。今のところ、phoneDetailコンポーネントは選択した電話のIDを表示します。（それほど印象的ではありませんが、次のステップでそれを強化します）。

2番目のルート宣言でのパラメータの使用に注意してください。このサービスは、現在のURLと照合されるテンプレートとしてルート宣言を使用します。接頭辞で定義されたすべての変数は、（注射可能な）$ routeParamsオブジェクトに抽出されます。

------------------------------------------
phoneDetailコンポーネント
------------------------------------------
phoneDetail電話機の詳細ビューを処理するコンポーネントを作成しました。phoneList別のディレクトリを使用してphoneDetailモジュールを作成し、モジュールの依存関係として追加したのと同じ規則を採用しましたphonecatApp。

app/phone-detail/phone-detail.module.js
[js]
angular.module('phoneDetail', [
  'ngRoute'
]);
[/js]
app/phone-detail/phone-detail.component.js
[js]
angular.
  module('phoneDetail').
  component('phoneDetail', {
    template: 'TBD: Detail view for <span>{{$ctrl.phoneId}}</span>',
    controller: ['$routeParams',
      function PhoneDetailController($routeParams) {
        this.phoneId = $routeParams.phoneId;
      }
    ]
  });
[/js]

app/app.module.js
[js]
angular.module('phonecatApp', [
  ...
  'phoneDetail',
  ...
]);
[/js]
------------------------------------------
サブモジュールの依存関係に関する注意事項
------------------------------------------
phoneDetailモジュールに依存ngRoute提供するためのモジュール$routeParamsで使用されているオブジェクト、phoneDetailコンポーネントのコントローラ。ngRouteまた、メインphonecatAppモジュールの依存関係でもあるため、そのサービスとディレクティブはアプリケーション（phoneDetailコンポーネントを含む）のどこでも利用可能です。

つまりngRoute、phoneDetailコンポーネントの依存関係のリストに含まれていなくても、アプリケーションは引き続き動作します。メインモジュールによって既にインポートされているサブモジュールの依存関係を省略することは魅力的かもしれませんが、弊社が得意とするモジュール性が損なわれます。

常にサブモジュールの依存関係を明示してください。親モジュールから継承した依存関係に依存しないでください（その親モジュールはある日存在しない可能性があるため）。

+++++++++++++++++++++++++++++++++++++++++++++++
STEP10 その他のテンプレート
+++++++++++++++++++++++++++++++++++++++++++++++
このステップでは、ユーザーが電話リスト内の電話をクリックしたときに表示される電話の詳細ビューを実装します。

リストの電話をクリックすると、電話機固有の情報を含む電話の詳細ページが表示されます。
電話詳細ビューを実装するために、$ httpを使用してデータを取得し、phoneDetailコンポーネントのテンプレートを完成させます。
------------------------------------------
データ
------------------------------------------
さらに、このディレクトリには各電話用のJSONファイルも1つ含まれています。

app/phones/nexus-s.json
[js]
{
  "additionalFeatures": "Contour Display, Near Field Communications (NFC), ...",
  "android": {
    "os": "Android 2.3",
    "ui": "Android"
  },
  ...
  "images": [
    "img/phones/nexus-s.0.jpg",
    "img/phones/nexus-s.1.jpg",
    "img/phones/nexus-s.2.jpg",
    "img/phones/nexus-s.3.jpg"
  ],
  "storage": {
    "flash": "16384MB",
    "ram": "512MB"
  }
}
[/js]
これらのファイルのそれぞれは、同じデータ構造を使用する電話のさまざまなプロパティを記述します。このデータは電話機の詳細ビューに表示されます。
------------------------------------------
コンポーネントコントローラ
------------------------------------------
このサービスをphoneDetail使用してコンポーネントのコントローラを拡張し$http、適切なJSONファイルを取得します。これは、phoneListコンポーネントのコントローラと同じ方法で動作します。
app/phone-detail/phone-detail.component.js
[js]
angular.
  module('phoneDetail').
  component('phoneDetail', {
    templateUrl: 'phone-detail/phone-detail.template.html',
    controller: ['$http', '$routeParams',
      function PhoneDetailController($http, $routeParams) {
        var self = this;

        $http.get('phones/' + $routeParams.phoneId + '.json').then(function(response) {
          self.phone = response.data;
        });
      }
    ]
  });
[/js]
------------------------------------------
コンポーネントテンプレート
------------------------------------------
インラインのTBDプレースホルダテンプレートは、携帯電話の詳細を構成するリストやバインディングを含む完全な外出テンプレートに置き換えられました。AngularJS マークアップの使用方法と、モデルからの電話データをビューに投影する方法に注目してください 。

app/phone-detail/phone-detail.template.html
[html]
<img ng-src="{{$ctrl.phone.images[0]}}" class="phone" />

<h1>{{$ctrl.phone.name}}</h1>

<p>{{$ctrl.phone.description}}</p>

<ul class="phone-thumbs">
  <li ng-repeat="img in $ctrl.phone.images">
    <img ng-src="{{img}}" />
  </li>
</ul>

<ul class="specs">
  <li>
    <span>Availability and Networks</span>
    <dl>
      <dt>Availability</dt>
      <dd ng-repeat="availability in $ctrl.phone.availability">{{availability}}</dd>
    </dl>
  </li>
  ...
  <li>
    <span>Additional Features</span>
    <dd>{{$ctrl.phone.additionalFeatures}}</dd>
  </li>
</ul>
[/html]

+++++++++++++++++++++++++++++++++++++++++++++++
STEP11 カスタムフィルタ
+++++++++++++++++++++++++++++++++++++++++++++++
このステップでは、独自のカスタム表示フィルタを作成する方法を学習します。

前のステップで、詳細ページに「true」または「false」のいずれかが表示され、特定の電話機能が存在するかどうかが示されました。このステップでは、カスタムフィルタを使用して、これらのテキスト文字列をグリフに変換しています。✓「true」は✘、「false」は✘。
------------------------------------------
The checkmarkFilter
------------------------------------------
このフィルタは一般的なものです（つまり、ビューやコンポーネントに固有のものではありません）core。これを「アプリケーション全体」の機能を含むモジュールに登録します。
app/core/core.module.js
[js]
angular.module('core', []);
[/js]

app/core/checkmark/checkmark.filter.js
[js]
angular.
  module('core').
  filter('checkmark', function() {
    return function(input) {
      return input ? '\u2713' : '\u2718';
    };
  });
[/js]

フィルタの名前は「チェックマーク」です。The inputは、trueまたはのいずれかfalseに評価され、true（- >✓）およびfalse（- >✘）を表すために選択した2つのUnicode文字のいずれかを返します。\u2713\u2718

フィルタが準備完了したので、coreメインphonecatAppモジュールの依存関係としてモジュール を登録する必要があります。

app/app.module.js
[js]
angular.module('phonecatApp', [
  ...
  'core',
  ...
]);
[/js]
------------------------------------------
テンプレート 
------------------------------------------
我々は2つの新しいファイル（作成しているのでcore.module.js、checkmark.filter.jsを）、私たちはレイアウトテンプレートでそれらを含める必要があります。

app/index.html
[html]
...
<script src="core/core.module.js"></script>
<script src="core/checkmark/checkmark.filter.js"></script>
...
[/html]

app/phone-detail/phone-detail.template.html
[html]
...
<dl>
  <dt>Infrared</dt>
  <dd>{{$ctrl.phone.connectivity.infrared | checkmark}}</dd>
  <dt>GPS</dt>
  <dd>{{$ctrl.phone.connectivity.gps | checkmark}}</dd>
</dl>
...
[/html]

+++++++++++++++++++++++++++++++++++++++++++++++
STEP12 イベントハンドラ
+++++++++++++++++++++++++++++++++++++++++++++++
このステップでは、電話機の詳細ページにクリック可能な電話機画像スワッパを追加します。

電話機の詳細ビューには、現在の電話機の1つの大きな画像といくつかの小さなサムネイル画像が表示されます。目的のサムネイル画像をクリックするだけで大​​きな画像をサムネイルのいずれかに置き換えることができれば幸いです。AngularJSでこれを行う方法を見てみましょう。
------------------------------------------
コンポーネントコントローラ
------------------------------------------
app/phone-detail/phone-detail.component.js

[js]
...
controller: ['$http', '$routeParams',
  function PhoneDetailController($http, $routeParams) {
    var self = this;

    self.setImage = function setImage(imageUrl) {
      self.mainImageUrl = imageUrl;
    };

    $http.get('phones/' + $routeParams.phoneId + '.json').then(function(response) {
      self.phone = response.data;
      self.setImage(self.phone.images[0]);
    });
  }
]
...
[/js]
ではphoneDetail、コンポーネントのコントローラ、我々は、作成したmainImageUrlモデルのプロパティをし、最初の電話の画像URLにデフォルト値を設定します。

また、（イベントハンドラとして使用する）メソッドを作成し、その値を変更します 。
------------------------------------------
コンポーネントテンプレート
------------------------------------------
app/phone-detail/phone-detail.template.html
[html]
<img ng-src="{{$ctrl.mainImageUrl}}" class="phone" />
...
<ul class="phone-thumbs">
  <li ng-repeat="img in $ctrl.phone.images">
    <img ng-src="{{img}}" ng-click="$ctrl.setImage(img)" />
  </li>
</ul>
...
[/html]
私たちngSrcは大きなイメージの指示をプロパティに結びつけました。

ngClickハンドラをサムネイル画像とともに登録しました。ユーザーがサムネイル画像の1つをクリックすると、ハンドラはメソッドのコールバックを使用して、プロパティの値をクリックされたサムネイル画像のURLに変更します。

+++++++++++++++++++++++++++++++++++++++++++++++
STEP13 RESTとカスタムサービス
+++++++++++++++++++++++++++++++++++++++++++++++
このステップでは、アプリケーションがデータをフェッチする方法を変更します。

RESTfulなクライアントを表すカスタムサービスを定義します。このクライアントを使用して、より低いレベルの$ http API、HTTPメソッド、およびURL を処理することなく、サーバーへのデータ要求を簡単に行うことができ ます。
------------------------------------------
依存関係
------------------------------------------
RESTfulな機能は、AngularJSフレームワークとは別に配布されるngResourceモジュールのAngularJSによって提供されます。

Bowerを使用してクライアント側の依存関係をインストールしているので、この手順では新しい依存関係を含めるように設定ファイルを更新し ます。
新しい依存関係は、AngularJSのバージョン1.5.xと互換性のある角度リソースモジュールのバージョンをインストールするようにbowerに指示します。この依存関係をダウンロードしてインストールするようにbowerに指示する必要があります。
------------------------------------------
サービス
------------------------------------------

私たちは、サーバー上の電話データへのアクセスを提供する独自のサービスを作成します。サービスを独自のモジュールに置くcoreので、依存関係を明示的に宣言することができます

app/core/phone/phone.module.js：
[js]
angular.module('core.phone', ['ngResource']);
[/js]
app/core/phone/phone.service.js：
[js]
angular.
  module('core.phone').
  factory('Phone', ['$resource',
    function($resource) {
      return $resource('phones/:phoneId.json', {}, {
        query: {
          method: 'GET',
          params: {phoneId: 'phones'},
          isArray: true
        }
      });
    }
  ]);
[/js]
ファクトリ関数を使用してカスタムAPIを登録するために、モジュールAPIを使用しました。我々はサービス名'Phone'とファクトリ関数を渡した。ファクトリ関数は、コントローラのコンストラクタに似ていますが、両方とも関数の引数を介して挿入される依存関係を宣言できます。Phoneサービスは、上の依存関係を宣言$resource によって提供されるサービス、ngResourceモジュールを。

$リソースサービスは、それが簡単に作成できるRESTfulな わずか数行のコードをクライアントに。このクライアントは、下位の$ httpサービスではなく、アプリケーションで使用できます。

app/core/core.module.js
[js]
angular.module('core', ['core.phone']);
[/js]
モジュールをモジュールの依存関係として追加する必要があります。
------------------------------------------
テンプレート
------------------------------------------
私たちのカスタムリソースサービスが定義されるので、このファイルと関連するファイルをレイアウトテンプレートに含める必要があります。さらに、モジュールを含むファイルもロードする必要があります.

app/index.html
[html]
<head>
  ...
  <script src="bower_components/angular-resource/angular-resource.js"></script>
  ...
  <script src="core/phone/phone.module.js"></script>
  <script src="core/phone/phone.service.js"></script>
  ...
</head>
[/html]
------------------------------------------
コンポーネントコントローラ
------------------------------------------
下位レベルのサービスを除外して新しいサービスに置き換えることで、コンポーネントコントローラ（PhoneListControllerおよびPhoneDetailController）を簡素化できるようになりました。AngularJSの サービスは、RESTfulなリソースとして公開されているデータソースと対話する場合よりも使いやすいです。コントローラ内のコードが何をしているのかを理解することも簡単になりました。

app/phone-list/phone-list.module.js
[js]
angular.module('phoneList', ['core.phone']);
[/js]

app/phone-list/phone-list.component.js
[js]
angular.
  module('phoneList').
  component('phoneList', {
    templateUrl: 'phone-list/phone-list.template.html',
    controller: ['Phone',
      function PhoneListController(Phone) {
        this.phones = Phone.query();
        this.orderProp = 'age';
      }
    ]
  });
[/js]

app/phone-detail/phone-detail.module.js
[js]
angular.module('phoneDetail', [
  'ngRoute',
  'core.phone'
]);
[/js]

app/phone-detail/phone-detail.component.js
[js]
angular.
  module('phoneDetail').
  component('phoneDetail', {
    templateUrl: 'phone-detail/phone-detail.template.html',
    controller: ['$routeParams', 'Phone',
      function PhoneDetailController($routeParams, Phone) {
        var self = this;
        self.phone = Phone.get({phoneId: $routeParams.phoneId}, function(phone) {
          self.setImage(phone.images[0]);
        });

        self.setImage = function setImage(imageUrl) {
          self.mainImageUrl = imageUrl;
        };
      }
    ]
  });
[/js]

PhoneListController私たちがどのように置き換えられたのか注目する

$http.get('phones/phones.json').then(function(response) {
  self.phones = response.data;
});
ちょうどと：

this.phones = Phone.query();
これは単純で宣言的なステートメントで、すべての電話機に対してクエリを実行します。

上記のコードで気づくべき重要なことは、Phoneサービスのメソッドを呼び出すときに、コールバック関数を渡さないことです。結果が同期的に返されたかのように見えますが、そうではありません。同期して返されるのは、XHR応答を受け取ったときにデータで埋められる「未来」です。AngularJSのデータバインディングのために、私たちはこの未来を利用してテンプレートにバインドすることができます。次に、データが到着すると、ビューは自動的に更新されます。

時には、将来のオブジェクトとデータバインディングのみに依存するだけでは、必要なすべてを行うには不十分な場合があります。そのため、これらのケースでは、サーバーレスポンスを処理するコールバック

+++++++++++++++++++++++++++++++++++++++++++++++
STEP14 アニメーション
+++++++++++++++++++++++++++++++++++++++++++++++

